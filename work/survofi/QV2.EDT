SURVO 98 edit field:    101       1000       1000 (32 bit version)
0001|*SAVE QV2
0004|*LOAD EDQ
0006|+LAG? þ PRINT CUR+1,E TO qv2_01.html
0007|- include HTML40.DEV
0008|- include Q.DV2
0009|- [HelpText]
0010|- shadow a: [LINK(qv2_02.html)]
0011|*  1 = lags and leads in transformations of variables
S   |   a                                                |
0012|- shadow a: [LINK(q13_02.html)]
0013|*  2 = LAG specification in PLOT operation
S   |   a                                     |
0014|E
0017|+LAG1? þ PRINT CUR+1,E TO qv2_02.html
0018|- include HTML40.DEV
0019|- include Q.DV2
0020|- [HelpText]
0021|*Variables with lags and leads are available in all types of the VAR oper-
0022|*ation using the following notation:
0023|*         # of observation    value of variable SERIES
0024|*             current - 2      SERIES[-2]
0025|*             current - 1      SERIES[-1]
0026|*             current          SERIES         (=SERIES[0])
0027|*             current + 1      SERIES[+1]
0028|*             current + 2      SERIES[+2]
0029|*Examples:
0030|*VAR MEAN3,DIFF TO TEST2
0031|*MEAN3=(SER1[-1]+SER1+SER1[+1])/3
0032|*DIFF=SER1-SER1[-1]
0033|*END
0035|*VAR Fibo,Ratio TO GOLDEN
0036|*Fibo=if(ORDER<3)then(1)else(Fibo[-1]+Fibo[-2])
S   |              <
0037|*Ratio=if(ORDER<2)then(MISSING)else(Fibo/Fibo[-1])
S   |               <
0038|*END
0040|- shadow a: [LINK(qv1_01.html)]
0041|*  V = More information on VAR operation
S   |   a                                   |
0042|E
0045|+STRING? þ PRINT CUR+1,E TO qv2_03.html
0046|- include HTML40.DEV
0047|- include Q.DV2
0048|- [HelpText]
0049|- shadow a: [LINK(qf2_01.html)]
0050|*  1 = String variables in data files
S   |   a                                |
0051|- shadow a: [LINK(qv2_04.html)]
0052|*  2 = Transformation of string variables
S   |   a                                    |
0053|E
0056|+VARSTR? þ PRINT CUR+1,E TO qv2_04.html
0057|- include HTML40.DEV
0058|- include Q.DV2
0059|- [HelpText]
0060|*If a string variable holds numerical information, it can be treated
0061|*like numerical variables in numerical transformations (by the VAR operation.)
0063|*To modify true textual information in string variables, a VAR operation
0064|*of the form
0065|*VAR str(U,p,len)=str(V1,p1,len1)&str(V2,p2,len2)&... TO <data>
S   |                                 &               &       <    >
0066|*where U,V1,V2,... are string variables, is available.
0067|*Above, str(U,p,len) means a partial string of U starting from position 'p'
0068|*and having length of 'len' bytes. Alternative notations are
0069|*str(U) (the whole string field), str(U,p) (the whole field from 'p' onwards).
0070|*'&' means concatenation (chaining) of the strings.
S   |  &
0071|*On the right hand side also constant strings of the form "ABC" can appear.
0072|*(Examples are given on the next page.)
0074|*pos(S,p,string) is a useful auxiliary function giving the position of 'string'
0075|*in the string variable S after the 'p'th position.
0076|*pos(S,string) is the same as pos(S,1,string) .
0077|*For example, if S is "ABC:123:X", then pos(S,:)=4, pos(S,5,:)=8, pos(S,Z)=0 .
0079|*Conditional VAR statements of the form
0080|*VAR Var1=if(str(...)=str(...))then(value1)else(value2) TO DATA1
0081|*are allowed. Also <,>,<> etc. are possible as relational symbols.
S   |                   < > <>
0082|- [New]
0083|*Also string fields with lags and leads are permitted.
0084|*For example,
0085|*VAR S=if(str(X[-1],1,2)=str(X,1,2))then(1)else(0) TO DATA1
0086|*gives S=1 when the 2 first characters of X are same in the previous
0087|*record and S=0 otherwise.
0088|- [/New]
0090|- [New]
0091|*Trailing blanks in string concatenation:
0092|*In string expression of the form str(A)&str(B)&str(C) trailing blanks
S   |                                        &      &
0093|*are included.
0094|*To remove such blanks, `connector' `|' is used in place of `&'.
S   |                                                             &
0095|*Thus if str(A)="AA  ", str(B)="BBB   ", str(C)="anything",
0096|*str(A)&str(B)&str(C)="AA  BBB   anything" but
S   |       &      &
0097|*str(A)|str(B)|sp&str(C)="AABBB anything" (sp denotes one blank).
S   |                 &
0098|- [/New]
0100|*Examples: (See, what are the effects of the VAR operations below.)
0101|[
0102| *
0103| *DATA TEST,A,B,N,M
0104| M AAAAAA  AAAAAAAA  AAAA  AAAAAAAA    A   A    AA
0105| N Code1   Code2    Year1  Code3     len   D  LagY
0106| A 281037  AB/1967   1937  1967:AB     7   0
0107| * 170667  A/1978    1967  1978:A      6   0    37
0108| * 120659  ACD/1977  1959  1977:ACD    8   0    67
0109| B 190939  D/1989    1939  1989:D      6   1    59
0110| *                                              39
0111| *VAR str(Year1)="19"&str(Code1,5) TO TEST
S   |                     &
0112| *VAR str(Code3)=str(Code2,pos1+1,4)&":"&str(Code2,1,pos1-1) TO TEST
S   |                                    &   &
0113| *                 pos1=pos(Code2,/)
0114| *VAR len=pos(Code2,sp)-1 TO TEST
0115| *                  sp (or space) is the notation for the 'space' character.
0116| *                  comma is the notation for ',' .
0117| *VAR D=if(str(Code2,1,1)="D")then(1)else(0) TO TEST / conditional statement
0118| *VAR str(LagY[+1])=str(Year1,3,2) TO TEST / lags and leads allowed
0119| *
0120|]..........................
0123|- [New]
0124|*VAR str(var2)=split(var1,<len>,<char>)
S   |                          <   > <    >
0125|- [/New]
0126|*splits a string in var1 so that spaces between 'words' are replaced
0127|*by <char> so that the length of each substring is at most <len>
S   |    <    >                                                 <   >
0128|*except for 'words' longer that <len> bytes.
S   |                                <   >
0129|*Example: VARSTR(str2)=split(var1,8,|) converts
0130|*var1="This is a long string" into form
0131|*var2="This is|a long|string|".
0133|- shadow a: [LINK(qv1_01.html)]
0134|*  V = More information on VAR operation
S   |   a                                   |
0135|E
0137|+VARSTAT? þ PRINT CUR+1,E TO qv2_05.html
0138|- include HTML40.DEV
0139|- include Q.DV2
0140|- [HelpText]
0141|#VARSTAT <data>,Y,<rule>
S   |         <    >   <    >
0142|*computes a derived variable Y from active variables (say X1,X2,...,Xm)
0143|*for active observations in <data> according to a given <rule>.
S   |                            <    >                      <    >
0145|*Rules available are:
0146|*VARSTAT <data>,Y,SUM             Y=X1+X2+...
S   |         <    >
0147|*VARSTAT <data>,Y,SUM,p           Y=X1^p+X2^p+...
S   |         <    >
0148|*VARSTAT <data>,Y,MEAN            Y=(X1+X2+...)/m
S   |         <    >
0149|*VARSTAT <data>,Y,MEAN,p          Y=((X1^p+X2^p+...)/m)^(1/p)
S   |         <    >
0150|*VARSTAT <data>,Y,MEDIAN          Y=median(X1,X2,...)
S   |         <    >
0151|*VARSTAT <data>,Y,STDDEV          Y=stddev(X1,X2,...)
S   |         <    >
0152|*VARSTAT <data>,Y,MAX             Y=max(X1,X2,...)
S   |         <    >
0153|*VARSTAT <data>,Y,MIN             Y=min(X1,X2,...)
S   |         <    >
0154|*VARSTAT <data>,Y,RANGE           Y=max-min
S   |         <    >
0155|*VARSTAT <data>,Y,#MISS           Y= # of missing values
S   |         <    >
0156|*VARSTAT <data>,Y,#N              Y= # of non-missing values
S   |         <    >
0157|*VARSTAT <data>,Y,#VAL,A          Y= # of values X=A  (A is a constant)
S   |         <    >
0158|*VARSTAT <data>,Y,#VAL,A,B        Y= # of values A<=X<=B (A and B constants)
S   |         <    >                                   <  <
0160|*Other forms of VARSTAT are described on next pages.
0162|*To compute several Y variables (say Y1,Y2,...) with different rules for
0163|*the same X1,X2,..., another form of VARSTAT with a VARSTAT specification
0164|*is
0165|#VARSTAT <data> / VARSTAT=Y1,Y2,...
S   |         <    >
0166|*                 Y1=<rule1> Y2=<rule2>, ...
S   |                     <     >    <     >
0167|*For example, the mean and the standard deviation in each active observation
0168|*are computed as variables M1 and S1 by
0169|*VARSTAT <data> / VARSTAT=M1,S1  M1=MEAN S1=STDDEV
S   |         <    >
0171|*VARSTAT <data>,*,<rule>
S   |         <    >   <    >
0172|*makes a collective transformation for all active variables. The original
0173|*values are overwritten in this form of VARSTAT.
0175|*Alternative rules:
0176|*VARSTAT <data>,*,DIVSUM,100      Xi=100*Xi/SUM    i=1,2,...,m
S   |         <    >
0177|*VARSTAT <data>,*,DIVMAX,100      Xi=100*Xi/MAX
S   |         <    >
0178|*VARSTAT <data>,*,NORM,p,C        Normalize: X1^p+X2^p+..=C
S   |         <    >
0179|*VARSTAT <data>,*,CENTER          Xi=Xi-mean
S   |         <    >
0180|*VARSTAT <data>,*,STANDARD        Xi=(Xi-mean)/stddev
S   |         <    >
0181|*VARSTAT <data>,*,DIV,<var>       Xi=Xi/<var>
S   |         <    >       <   >             <   >
0182|*VARSTAT <data>,*,MLT,<var>       Xi=Xi*<var>
S   |         <    >       <   >             <   >
0183|*VARSTAT <data>,*,ADD,<var>       Xi=Xi+<var>
S   |         <    >       <   >             <   >
0184|*VARSTAT <data>,*,SUB,<var>       Xi=Xi-<var>
S   |         <    >       <   >             <   >
0185|- [New]
0186|*VARSTAT <data>,*,SORT            Sort in ascending order
S   |         <    >
0187|- [/New]
0189|*Example:
0190|[
0191| *VARSTAT TEST,*,DIVSUM    / Activate these two VARSTAT lines!
0192| *VARSTAT TEST,Sum,SUM
0193| *VARS=X1,X2,X3
0194| *DATA TEST,A,B,N,M
0195| N  X1     X2     X3        Sum
0196| M  AA.AA  AA.AA  AA.AA   111.111
0197| A   6      -      1
0198| *   6      3      5
0199| *   -      1      7
0200| *   8      1      0
0201| B   6      2      2
0202| *
0203| *
0204|]
0205|- shadow a: [New][LINK(qv2_06.html)]
0206|d A = Some special forms of VARSTAT
S   |  a                               ;
0207|- shadow a: [LINK(qv1_01.html)]
0208|* V = More information on transformations
S   |  a                                     |
0210|E
0213|+VARSTAT2? þ PRINT CUR+1,E TO qv2_06.html
0214|- include HTML40.DEV
0215|- include Q.DV2
0216|- [HelpText]
0217|- [New]
0218|*Special forms of VARSTAT
0219|- [/New]
0221|*VARSTAT <data>,Y,FIRST,L / L=val1,val2,...
S   |         <    >
0222|*finds the first occurrence of values listed by L in each record
0223|*and saves the position (# of variable) wherefrom the sought sequence
0224|*starts as variable Y. For example, if L=0,1,0,1 and we have a
0225|*record 1 1 0 1 1 0 1 0 1 1 0 0 1 0 1 1 1 ..., Y will be 6.
0227|*VARSTAT <data>,Y,LAST,L / L=val1,val2,...
S   |         <    >
0228|*respectively finds the last occurrence of a list of values. In the
0229|*example above Y would be 12.
0231|*Both in FIRST and LAST missing values in the list are notated by `-'s.
0232|*If the sequence of values given by L is not found at all in a certain
0233|*record, the code of a missing value is saved in Y.
0235|- [New]
0236|*Special forms of VARSTAT (continuation)
0237|- [/New]
0239|*VARSTAT <data>,Y,#SEQ,L / L=val1,val2,...
S   |         <    >
0240|*finds the number of sequences of values listed by L in each record.
0241|*For example, if L=1,0,1 and we have a record
0242|*1 1 0 1 1 0 1 0 1 1 0 0 1 0 1 0 1 , Y will be 3.
0243|*  ^     ^               ^           <- starting positions of 1,0,1
S   |                                     <
0244|*If specification OVERLAP=1 is given, also overlapping sequences are counted.
0245|*In this case in the example
0246|*1 1 0 1 1 0 1 0 1 1 0 0 1 0 1 0 1   Y will be 5.
0247|*  ^     ^   ^           ^   ^
0249|*VARSTAT <data>,Y,#RUN,L / L=val1,val2,...
S   |         <    >
0250|*finds the number of runs of values listed by L in each record.
0251|*For example, if L=1,2 and we have a record
0252|*1 1 1 0 2 1 2 0 0 2 2 0 1 , Y will be 4
0253|*^       ^         ^     ^   <- starting positions of the runs
S   |                             <
0256|- [New]
0257|*Special forms of VARSTAT (continuation)
0258|- [/New]
0260|*VARSTAT <data>,Y,CYCLEN
S   |         <    >
0261|*computes the length of the shortest cycle of values which generates
0262|*the current record of active variables.
0264|*Example:
0265|[
0266| *DATA C12,a,a+4,n,m
0267| m 1 1 1 1 1 1 1 1 1 1 1 1 11
0268| n A B C D E F G H I J K L  X
0269| a 1 2 5 1 2 5 1 2 5 1 2 5  3
0270| * 4 7 4 7 4 7 4 7 4 7 4 7  2
0271| * 9 9 9 9 9 9 9 9 9 9 9 9  1
0272| * 1 2 3 4 1 2 1 2 3 4 1 2  6
0273| * 1 2 1 2 1 2 1 2 1 2 1 1 12
0274| *
0275| *MASK=AAAAAAAAAAAA
0276| *VARSTAT C12,X,CYCLEN / gives cycle lengths of A,B,...,K,L  as X
0277| *
0278|]
0280|- [New]
0281|*Special forms of VARSTAT (continuation)
0282|- [/New]
0284|*VARSTAT <data>,Y,#MODEVAL
S   |         <    >
0285|*computes # of values (frequency) of the most common value in
0286|*the current record.
0288|*For example, in the case
0289|*1 3 2 3 2 2 1 1 3 3 3 3
0290|*#MODEVAL gives 6 since the mode (3) has 6 occurrences.
0292|- shadow a: [LINK(qv2_05.html)]
0293|*V = More information on VARSTAT
S   | a                             |
0294|E
