SURVO 98 edit field:    101       1000       1000 (32 bit version)
0001|*SAVE QW7
0004|+VMFEDIT? þ PRINT CUR+1,E TO qw7_01.html
0005|- include HTML40.DEV
0006|- include Q.DV2
0007|- [HelpText]
0008|*The MFEDIT operation   written by Markku Korhonen (HUCC)
S   | 111111111111111111111
0010|*Editing and displaying several Survo data files at a time
0012|*Further information:
0013|- shadow a: [LINK(qw7_02.html)]
0014|* 1 = Introduction, assignements for Survo data files
S   |  a                                                 |
0015|- shadow a: [LINK(qw7_03.html)]
0016|* 2 = Fields on forms
S   |  a                 |
0017|- shadow a: [LINK(qw7_04.html)]
0018|* 3 = Options in the MFEDIT operation
S   |  a                                 |
0019|- shadow a: [LINK(qw7_05.html)]
0020|* 4 = Validity checks of field values (FEDIT and MFEDIT)
S   |  a                                                    |
0021|- shadow a: [LINK(qw7_06.html)]
0022|* 5 = Designing the forms in MFEDIT
S   |  a                               |
0023|- shadow a: [LINK(qw7_07.html)]
0024|* 6 = Transformations in MFEDIT
S   |  a                           |
0025|- shadow a: [LINK(qw73_01.html)]
0026|* 7 = The MFEDIT keyboard
S   |  a                     |
0027|- shadow a: [LINK(qw7_08.html)]
0028|* 8 = Protection of (old) observations
S   |  a                                  |
0030|- shadow a: [LINK(q21_01.html)]
0031|* D = More on data analysis
S   |  a                       |
0032|- shadow a: [LINK(q01_02.html)]
0033|* E = More information on SURVO 84 EDITOR
S   |  a                                     |
0035|E
0038|+VMFINTRO? þ PRINT CUR+1,E TO qw7_02.html
0039|- include HTML40.DEV
0040|- include Q.DV2
0041|- [HelpText]
0042|*Introduction
S   | 111111111111
0044|*With the MFEDIT operation you may display and edit several SURVO 84C
0045|*data files at a time. The condition for the operation is that there
0046|*must be a relation between those data files. The relation is
0047|*indicated by key variables.
0048|* In the MFEDIT operation, information is displayed, edited and entered
0049|*on forms in the same way as in the FEDIT operation. In MFEDIT each
0050|*form may be divided into subforms. Different files may be assigned to
0051|*subforms. The size of a form is not limited to the size of the
0052|*screen. For instance, one may design a form which has 120 rows and
0053|*100 columns.
0054|* Further, the user may have a set of forms which are displayed one at
0055|*a time. When new values are entered, MFEDIT automatically checks that
0056|*the values are not in contradiction with the type of the field.
0057|*Additional validity checks may be defined, e.g. by listing valid
0058|*values for some fields.
0060|*The form of the MFEDIT operation is
0062|*MFEDIT <form file>
S   |        <         >
0063|*FILE1=<Survo data file>(<list of keys>)
S   |       <               > <            >
0064|*FILE2=<Survo data file>(<list of keys>)
S   |       <               > <            >
0065|*...
0066|*<options>
S   | <       >
0068|*THE FORM FILE
0069|*The forms are defined by a separate ASCII file. Their maximum record
0070|*length is 253 characters. Each form may be divided into subforms.
0071|*Usually, each Survo data file has its one subform and within one
0072|*subform, only variables of one data file are referred to. You can use
0073|*the SURVO 84C editor to create and edit it (unlike FEDIT, MFEDIT
0074|*cannot create a default form file).
0076|*SURVO DATA FILES
0077|*Survo data files must be given in the order defined by their hie-
0078|*rarchy (if such exists). All data files must exist; MFEDIT cannot
0079|*create them. After the name of the data file the keys defining the
0080|*relation between files are given in parentheses in such an order
0081|*that the primary keys are given first.
0083|*By default, the program expects that the corresponding keys have the
0084|*same names in different files; otherwise the correspondency must be
0085|*given. If that is not the case, then the correspondency is defined
0086|*by giving both names separated by a vertical bar in either of the
0087|*files (the name existing in that file must be given first), e.g.
0089|*MFEDIT federat.txt
0090|*FILE1=Society(Scode|Society)
S   |                    11111111
0091|*FILE2=Persons(Personid)
0092|*FILE3=Members(Society,Personid)
0093|*Up to 7 assignments can be given to MFEDIT by the FILEn specifica-
0094|*tions. Each assignment may refer to different files or some of them
0095|*may refer to the same file. Up to 10 different key variables can
0096|*exist in these assignments.
0098|*By default, the program assumes that last file (given by FILE3 in the
0099|*example) is of primary interest, here named as a target file. During
0100|*the session, the target file can be changed by pressing the F4 key.
0102|*OPTIONS
0103|*With various options the user may specify the order in which the
0104|*observations are shown, the preliminary work of the program, the size
0105|*of the forms and some other limits of the program. One can also de-
0106|*fine that lowercase letters should be changed to capital letters.
0107|*Fields on forms
S   | 111111111111111
0109|*Like FEDIT there are two kind of fields that may exist on forms:
0110|*  (1) standard fields and
S   |   1111111111111111111
0111|*  (2) selection fields.
S   |   111 1111111111111111
0113|- shadow a: [LINK(qw7_01.html)]
0114|*   M = More information on MFEDIT operation
S   |    a                                      |
0115|E
0118|+VMFIELDS? þ PRINT CUR+1,E TO qw7_03.html
0119|- include HTML40.DEV
0120|- include Q.DV2
0121|- [HelpText]
0122|*Fields on forms: Two kind of fields may exist on forms:
S   | 111111111111111
0124|*  (1) standard fields and
S   |   1111111111111111111
0125|*  (2) selection fields.
S   |   111 1111111111111111
0127|*In standard fields, each field corresponds to a variable in a Survo
S   |    666666666666666
0128|*data file. The desired value of the variable is written on the field.
0129|*The field length is defined by the type of the variable.
0131|*In the case of selection fields, the alternatives for values of a
S   |                6666666666666666
0132|*(group of) variable(s) are written on the form. The user selects one
0133|*or more of the alternatives by pressing the Return key. The number of
S   |                                             666666
0134|*selections in a selection group equals to the number of variables in
0135|*the Survo data file assigned to this selection group. Free selection
S   |                                                       1111
0136|*fields may be used for those situations where all possible choices
0137|*cannot be written out.
0139|- shadow a: [LINK(qw7_01.html)]
0140|*   M = More information on MFEDIT operation
S   |    a                                      |
0141|E
0144|+VMFOPTS? þ PRINT CUR+1,E TO qw7_04.html
0145|- include HTML40.DEV
0146|- include Q.DV2
0147|- [HelpText]
0148|*Options in the MFEDIT operation
S   | 11111111111111111111111111111111
0150|*ORDER   If ORDER=ORIG is specified, then the observations in
0151|*        the target file are displayed in the original order. During
0152|*        the session, the user can switch back to the sorted order
0153|*        by pressing F6 (if the sorted keys have been saved before).
0155|*OPTIONS If OPTIONS=NOSORT is specified, then the key values are
0156|*        are neither copied nor sorted in the memory. It follows
0157|*        that the observations in the target file are displayed
0158|*        in the original order only.
0160|*CAPS    The default behaviour for changing the small letters
0161|*MAXCOLS Maximum number of columns in the forms (49<maxcols<254)
S   |                                                   <       <
0162|*        (default: found maximum length; option rarely needed)
0163|*MAXROWS Maximum number of rows in the forms (default: found
0164|*        maximum number of rows; option rarely needed)
0165|*MAXCHOICES  Maximum number of selections in one group (default 50)
0167|*SELECTGROUPS  IF SELECTGROUPS=ROWPAIR is specified and if several
0168|*         selection groups (with a single selection) are located
S   |                                   1111111111111111
0169|*         one after the other then after the selection the cursor
0170|*         is moved to the choice of the next group located in
0171|*         the same row (if exists) - not to the first choice.
0173|*         IF SELECTGROUPS=PAIRED is specified then the cursor is
0174|*         moved to the choice of the next group having the same
0175|*         order number (not necessarily in the same row).
0177|*         For multi-selection groups SELECTGROUPS has no effect!
0179|- shadow a: [LINK(qw7_01.html)]
0180|*   M = More information on MFEDIT operation
S   |    a                                      |
0181|E
0184|+VMVALCHK? þ PRINT CUR+1,E TO qw7_05.html
0185|- include HTML40.DEV
0186|- include Q.DV2
0187|- [HelpText]
0188|*Validity checks of field values (FEDIT and MFEDIT)
S   | 11111111111111111111111111111111
0190|*Validity checks for the entered values may be defined by RESTR
0191|*statements in the form file.
0193|*  For numeric variables, the minimum and maximum values or
0194|*  a list of valid values may be given.
0196|*  For string variables, only a list of valid strings can be given.
0198|*Each RESTR statement ends with a ENDRESTR statement. These
0199|*statements are placed after the ENDTEXT statement.
0200|*Examples:
0202|*RESTR:  MIN(vble1,vble2,vble3)=0;
0203|*        MAX(vble1,vble2)=99; MAX(vble3)=999;
0204|*        vble4=0,1,2
0205|*        vble5=0(1)9
0206|*        vble6='AGFA','FUJI','KODAK';
0207|*ENDRESTR;
0208|*With one MIN or MAX definition, several variables having the same
0209|*minimum (maximum) value may be given. Note that the string values
0210|*are given in apostrophes. If the values of a numeric variable are
0211|*equally spaced then an abbreviated notation may be used, e.g. the
0212|*specification 0(1)9 yields the same as 0,1,2, ..., 9.
0214|*If validity checks are defined for a field and the type value does
0215|*not fill the given conditions, an error message is given. Only valid
0216|*values are written into the data file.
0218|*The CAPS specification may be used to alter the default behaviour for
0219|*each variable separately while small letters are entered. The default
0220|*behaviour for all variables may be given by the CAPS option of the
0221|*FEDIT or MFEDIT operation. Example:
0223|*RESTR  CAPS(vble6,vble7,vble8)=Y   ENDRESTR;
0225|*The given value Y defines that for the three variables entered
0226|*lowercase letters are transformed to capital letters. If the user
0227|*had given the FEDIT option CAPS=1 in the edit field, then he might
0228|*define for some variables that no transformation should be done.
0229|*In that case, the letter N would be used instead of Y.
0231|- shadow a: [LINK(qw71_01.html)]
0232|*   F = More information on FEDIT operation
S   |    a                                     |
0233|- shadow a: [LINK(qw7_01.html)]
0234|*   M = More information on MFEDIT operation
S   |    a                                      |
0235|E
0238|+VMFRMDSG? þ PRINT CUR+1,E TO qw7_06.html
0239|- include HTML40.DEV
0240|- include Q.DV2
0241|- [HelpText]
0242|*Designing the forms in MFEDIT
S   | 11111111111111111111111111111
0244|*The form definitions are given in MFEDIT by a separate ASCII file,
0245|*a form file. The form is divided into subforms which are indicated
0246|*by the SUBFORM and ENDSUBFORM statements. The structure of the form
0247|*file in MFEDIT is the following:
0249|*FORM(name of the form):
S   | 1111
0250|*SUBFORM(name of subform): FILE <name of data file><protection opt>;
S   | 1111111                        <                 ><              >
0251|*SELECT:
0252|*   < definition of variables corresponding to each
S   |    <
0253|*     (multi)selection group >
S   |                             >
0254|*ENDSELECT;
0255|*TRANSF:   <definition of automatic transformations>
S   |           <                                       >
0256|*ENDTRANSF;
0257|*TEXT:
S   | 11111
0258|*      <definition of the ordinary form>
S   |       <                               >
0259|*ENDTEXT;
S   | 11111111
0260|*RESTR:
0261|*      <definition of valid variable values>
S   |       <                                   >
0262|*ENDRESTR;
0263|*ENDSUBFORM
S   | 1111111111
0265|*SUBFORM(name of 2. subform):  FILE <name of data file>;
S   | 1111111                            <                 >
0266|*  ....
0267|*ENDSUBFORM
0268|*...
0269|*ENDFORM;
S   | 11111111
0270|*FORM(name of the next form):
S   | 1111
0271|*...
0272|*ENDFORM;
S   | 1111111
0273|*ENDOFFILE;
S   | 1111111111
0275|*The form file in the following example consists of one form
0276|*with two subforms:
0278|*FORM(F1):
0279|*SUBFORM(Customer)  FILE Customer;
0280|*TEXT:
0281|*  Customer I.D.: &Customid
S   |                  &
0282|*  First name: &Fname
S   |               &
0283|*  Last name:  &Lname
S   |               &
0284|*  Street: &Street
S   |           &
0285|*  Postal code: &Postcode    City: &City
S   |                &                  &
0286|*  Country: &Country
S   |            &
0287|*ENDTEXT;
0288|*ENDSUBFORM;
0289|*SUBFORM(Delivery)  FILE Delivery;
0290|*TEXT:
0291|*  Product code: &Prodcode            Customer code: &Customid
S   |                 &                                   &
0292|*  Date of delivery, Year: &Year  Month: &Month  Day: &Day
S   |                           &             &            &
0293|*  # of items deliverd: &Nofitems   Unit price: &Unitprce
S   |                        &                       &
0294|*ENDTEXT;
0295|*ENDSUBFORM;
0296|*ENDFORM;
0297|*ENDOFFILE;
0298|*Each subform definition starts with SUBFORM keyword followed by a
0299|*short name (maximum 8 characters) in parentheses. Next, the name of
0300|*the Survo data file or logical reference (FILE1, FILE2 ...) is given
0301|*by the FILE statement. The file (or logical) name may be followed
0302|*by a protection option.  Each SUBFORM statement generates the
0303|*upper border of the subform. The border consists of the name of
0304|*the Survo data file, the current record sequenece number, the form
0305|*and the subform names. The middle part of the border is reserved
0306|*for certain status information (e.g. which file is the target file).
0308|*Instead of the file name given in the FILE statement, the
0309|*corresponding logical name (FILE1, FILE2) may be given. If the same
S   |               111111111111
0310|*data file is assigned to several forms, then logical names must be
0311|*used for linking the subforms to the right FILEn specifications.
0312|*The contents of the subform are defined by the lines between the key
0313|*words TEXT and ENDTEXT:
0315|*    The left margin of a standard field is given by the character
S   |                        1111111111111111
0316|*    & followed by the variable name. The length of the field is
S   |     &
0317|*    defined by the length of the variable:
0319|*      1 byte numeric variable - field length is 3
0320|*      2         "                      "        6
0321|*      4 byte real type numeric variable - field length is 7
0322|*      8         "                                 "      14
0323|*      string variables - field length is the maximum length of
0324|*      the variable defined in the Survo data file.
0326|*By default fields in a form refer to the Survo data file given by
0327|*the FILE statement. However, a standard field may refer to another
0328|*file too. In that case the logical file reference must be given
0329|*after the variable name in parenthesis, e.g.
0331|*    &price(F1)    or   &price(FILE1)
S   |     &                  &
0333|*   If the subform includes selection fields, then a SELECT statement
S   |                            1111111111111111
0334|*   is needed to declare the symbols of the selection groups, the
0335|*   number of selections allowed and the names of variables, where
0336|*   the selected values will be saved, e.g. (on the next page)
0337|*FORM(F1):
0338|*SUBFORM(Persons)  FILE Persons;
0339|*TEXT:
0340|*  PERSON FORM:
0341|*  Person I.D.: &Personid
S   |                &
0342|*  Family name: &Name1
S   |                &
0343|*  First name:  &Name2
S   |                &
0344|*  Street: &Street
S   |           &
0345|*  Postal code: &Postcode       City: &City
S   |                &                     &
0346|*ENDTEXT;
0347|*ENDSUBFORM;
0348|*SUBFORM(exhibits)  FILE exhibits;
0349|aSELECT @1 1 TO Classif;  ENDSELECT;
S   | 111111                   1111111111
0350|*TEXT:
0351|*  EXHIBITS
0352|*  Person I.D.: &Personid       Exhibit code: &Exhibcde
S   |                &                             &
0353|*  Title of the exhibit: &Exhtitle
S   |                         &
0355|*  The classification of the exhibit:
0356|a  @1<Traditional>    @1<Postal History>  @1<Postal Stationery>
S   |   11<           >      <              >    <                 >
0357|a  @1<Aerophilately>  @1<Thematic>        @1<Maximaphily>
S   |     <             >    <        >          <           >
0358|*  The 1st subclassification: &Subcl1
S   |                              &
0359|*  The 2nd subclassification: &Subcl2
S   |                              &
0360|*ENDTEXT;
0361|*ENDSUBFORM;
0362|*SUBFORM(Particip)     FILE particip;
0363|aSELECT @2 1 TO Class; @3 1 TO Prize; @4 1 TO Specprze; ENDSELECT;
0364|*TEXT:
0365|*  Participations to exhibits
0366|*  Person I.D.: &Personid    Exhibit code: &Exhibcde
S   |                &                          &
0367|*  Date of exhibition (yy-mm-dd): &Date
S   |                                  &
0368|*  Exhibition name: &Exhname
S   |                    &
0369|a  Class:  @2<Champion>   @2<Competitive>
S   |             <        >     <           >
0370|*  Prize awarded:
0371|a   @3<LargeGold>   @3<Gold>   @3<LargeVermeil>  @3<Vermeil>
S   |      <         >     <    >     <            >    <       >
0372|a   @3<LargeSilver> @3<Silver> @3<SilverBronze>  @3<Bronze>  @3<None>
S   |      <           >   <      >   <            >    <      >    <    >
0373|a  Special Prize: @4<None>  @4<Special>  @4<Felicitat>
S   |                    <    >    <       >    <         >
0374|*ENDTEXT;
0375|*ENDSUBFORM;
0377|*In the TEXT statement, a selection field starts with the symbol
0378|*of the corresponding selection group (defined in SELECT statement)
0379|*and the corresponding value to be saved is given between the
0380|*characters < and >.
S   |            <     >
0381|*Free selection fields are given by <?>. The field length of a
S   |                                    < >
0382|*selection field is defined by the type of the corresponding variable.
0384|*Validity cehecks for field values may be defined by RESTR statements.
0386|- shadow a: [LINK(qw7_01.html)]
0387|*M = More information on MFEDIT operation
S   | a                                      |
0388|E
0391|+VMTRANSF? þ PRINT CUR+1,E TO qw7_07.html
0392|- include HTML40.DEV
0393|- include Q.DV2
0394|- [HelpText]
0395|*Numerical transformations in FEDIT or MFEDIT may be defined by the
S   | 1111111111111111111111111
0396|*TRANSF statement, which is placed before the TEXT statement. An example:
S   | 111111
0398|*TRANSF: Newvbl1=(Score1-Score2)^2/(Score3-Score4)^2;
0399|*        Logsum=LOG(Price1+Price2+Price3); ENDTRANSF;
0401|*Note that each transformation ends with a semicolon. These
0402|*transformation may involve besides arithemitic operations the
0403|*following mathematical functions ABS, SQRT, EXP and LOG. If a
0404|*variable used in arithmetic operations or in mathematical functions
0405|*has a missing value then the resulting value is always missing. The
0406|*missing values are handled differentely by the special functions MAX,
0407|*MIN, SUM, MEAN and DEV, e.g. the statement
0409|*     Newvbl2=MEAN(Score1,Score2,Score3,Score4);
0411|*computes mean of the non-missing values of the four variables.
0412|*A transformation may be conditioned by an if-then-else statement,
0413|*e.g.
0415|*TRANSF: If Price1>Price2 and Price3>Price4
S   |                  >                 >
0416|*           then X1=Price1+Price3 else X1=Price2+Price4;
0417|*          If City="HELSINKI" or City="Espoo"
0418|*           then Cityarea=1 else Cityarea=0;  ENDTRANSF;
0420|*For numeric variables the following six conditional operators are
0421|*available:
0423|*  >    "greater than"
S   |   >
0424|*  >=   "greater than or equal to"
S   |   >
0425|*  =    "equal to"
0426|*  <=   "less than or equal to"
S   |   <
0427|*  <    "less than"
S   |   <
0428|*  <>   "not equal"
S   |   <>
0430|*String variables may be used in the conditional expression too (but
0431|*not in the ordinary transformation statement). For string variables
0432|*only the operators "equal" and "not equal" are available. Several
0433|*conditions can be joined either by AND or OR operators but both types
0434|*must not be used in the same if statement. The then and else parts
0435|*may involve one transformation statement only.
0437|*To indicate missing values in transformations the symbol MISSING may
0438|*be used, e.g.
0440|*TRANSF if Dpros=MISSING then Dpros=0;
0441|*       if Treatmnt<1 then Treatmnt=MISSING; ENDTRANSF;
S   |                   <
0443|*     By default, MFEDIT assumes that the variables used
0444|*     in transformatios refer to the default file of that subform.
0445|*     Variables in other files may be referred by giving the logi-
0446|*     cal file reference in brackets, e.g.
0448|*     TRANSF: Totprice=Nofitems*Unitprce[F2];  ENDTRANSF;
0449|*The defined transformations are computed for the current observations
0450|*just before the form is shown on the screen and each time any of the
0451|*fields on the form is changed. Therefore, the transformations must be
0452|*such that they can be performed several times without getting wrong
0453|*results. A necessary condition is that the left-hand and righthand
0454|*sides of transformation equations have no common variable. The prog-
0455|*ram does not check this feature!
0457|- shadow a: [LINK(qw71_01.html)]
0458|*   F = More information on FEDIT operation
S   |    a                                     |
0459|- shadow a: [LINK(qw7_01.html)]
0460|*   M = More information on MFEDIT operation
S   |    a                                      |
0461|E
0464|+VMFPROT? þ PRINT CUR+1,E TO qw7_08.html
0465|- include HTML40.DEV
0466|- include Q.DV2
0467|- [HelpText]
0468|*Earlier written observations may be protected against changes by
0469|*mistake by adding the key word PROTECTED after file name in the
0470|*FILE statement, e.g.
0471|*    FILE FILE1 PROTECTED;
0472|*A given number of observations may be protected by stating the
0473|*number of protected observations after the keyword:
0474|*    FILE FILE1 PROTECTED 266;
0475|*At this moment the state of protection cannot be changed during
0476|*the MFEDIT session.
0478|- shadow a: [LINK(qw7_01.html)]
0479|*M = More information on MFEDIT operation
S   | a                                      |
0480|E
