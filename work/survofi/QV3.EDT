SURVO 98 edit field:    101       1000       1000 (32 bit version)
0001|*SAVE QV3
0005|*................................................................................
0006|*LOAD EDQ
0008|+CHANCE? þ PRINT CUR+1,E TO qv3_01.html
0009|- include HTML40.DEV
0010|- include Q.DV2
0011|- [HelpText]
0012|*Various random variates may be generated by the VAR operation by means
0013|- shadow %: [LINK(qm1_03.html)] [/LINK]
0014|*of the statistical library functions of editorial computing. (See ARIT?)
S   |                                                                   %%%%
0015|*To generate a random value from a distribution with the inverse distri-
0016|*bution function G(), use G(rnd(0)) in the VAR operation.
0017|*For example, standard normal random variates are obtained by
0018|*N.G(0,1,rnd(0)) or faster by probit(rnd(0)). Other alternatives are:
0019|*BIN.G(n,p,rnd(0))      binomial distribution Bin(n,p)
0020|*Poisson.G(a,x)         Poisson distribution Poisson(a)
0021|*t.G(n,rnd(0))          t distribution with n degrees of freedom
0022|*CHI2.G(n,rnd(0))       Chi-square distribution with n degrees of freedom
0023|*F.G(m,n,rnd(0))        F distribution with m,n degrees of freedom
0025|*For serious applications the alternative random number generator rand()
0026|*is recommended instead of rnd().
0028|- shadow a: [LINK(qv3_02.html)]
0029|*  R = Alternative random number generators
S   |   a                                      |
0030|- shadow a: [LINK(qv1_01.html)]
0031|*  V = More information on VAR operation
S   |   a                                   |
0032|- shadow a: [LINK(qmm1_12.html)]
0033|*  M = MNSIMUL for fast generation of multivariate normal samples
S   |   a                                                            |
0034|- shadow a: [LINK(qv3_04.html)]
0035|*  T = TRANSFORM <data> BY #UNIFORM(a,b)
S   |   a             <    >                |
0036|- shadow a: [LINK(qv3_06.html)]
0037|*  X = RNDTEST for testing sequences of random numbers
S   |   a                                                 |
0039|E
0042|+RAND? þ PRINT CUR+1,E TO qv3_02.html
0043|- include HTML40.DEV
0044|- include Q.DV2
0045|- [HelpText]
0046|*The rnd() function is a adopted as such as the Microsoft C Library
0047|*function rand. It is based on a mixed congruential algorithm
0048|*     U(n)=214013U(n-1)+2531011 mod 2^31 .
0049|*According to certain empirical tests with an optional RNDTEST operation
0050|*of Survo, these numbers are rather good but not as good as those
0051|*generated by the rand() function described below.
0053|*rand(n) where 1<=n<=2^32-1=4294967295 generates random numbers
S   |                <  <
0054|*according to a Combined Tausworthe generator presented by Shu Tetsuoka
0055|*and Pierre L'Ecuyer (ACM Transactions on Modelling and Computer Simulation,
0056|*Vol.1, No.2, 1991). The first one of the proposed three generators is
0057|*implemented as rand().
0058|*The period length of rand() is about 10^18. In more serious simulation
0059|*experiments where several long non-overlapping series of random numbers
0060|*are to be guaranteed, special INSEED and OUTSEED specifications are
0061|*available in VAR. The OUTSEED=<seed_number_file> specification
S   |                               <                >
0062|*saves the last two seed numbers used by rand(). To continue from this
0063|*point onwards in a new experiment, enter these seed numbers by a
0064|*corresponding INSEED=<seed_number_file> specification.
S   |                      <                >
0065|- shadow %: [%=0]
0066|*When INSEED is given, the parameter n in rand(n) has no importance.
S   |      %%%%%%
0069|*Another alternative is the urand() function which corresponds to the
0070|*classical prime modulus multiplicative linear congruential generator
0071|*     U(n)=16807*U(n-1) mod 2^31-1
0072|*suggested by Lewis, Goodman and Miller in 1969 and praised by Park
0073|*and Miller as a minimal standard generator (see their paper "Random
0074|*number generators: good ones are hard to find" in Communications of
0075|*ACM, October 1988).
0076|*The period length is only 2^31-1=2147483647 (2*10^9).
0078|- [New]
0079|*A new alternative is the mrand() function using the Mersenne Twister
0080|*algorithm by Takuji Nishimura and Makoto Matsumoto (1998, modified
0081|*2002). It has a huge period 2^19937-1 (a Mersenne prime),
0082|*i.e. about 10^6000.
0083|*Currently mrand() is available in operations VAR, TRANSFORM BY #UNIFORM,
0084|*MAT #TRANSFORM, MNSIMUL.
0085|- [/New]
0087|- shadow a: [LINK(qv1_01.html)]
0088|*  V = More information on VAR operation
S   |   a                                   |
0089|E
0092|+VARR? þ PRINT CUR+1,E TO qv3_03.html
0093|- include HTML40.DEV
0094|- include Q.DV2
0095|- [HelpText]
0096|#VAR <y_variable>=#<function>(<expression>) TO <data>
S   |     <          >  <        > <          >     <    >
0097|*makes various special transformations of <expression> to <y_variable>.
S   |                                          <          >    <          >
0098|*In most cases <expression> is simply a variable.
S   |               <          >
0099|*The following #<functions> are available:
S   |                <         >
0100|*      #RANK   (ranks of values, tied observations with average rank)
0101|*      #NRANK  (ranks of values, tied observations with lowest rank)
0102|*      #NORMAL (normalized values with original mean and variance)
0103|*      #STD    (standardized values with mean=0, std.dev=1)
0104|*      #CENTER (centered values with mean=0)
0105|*      #PROPORTION (values divided by their total sum)
0106|*      #PERCENT    (100 times values divided by their total sum)
0107|*      #TRUNCP (outliers specified by P are replaced by missing values)
0108|*      #WINSP  (outliers specified by P are replaced by border values)
0109|*      #TRUNCL (outliers specified by LEVEL are replaced by missing values)
0110|*      #WINSL  (outliers specified by LEVEL are replaced by border values)
0112|*In #TRUNCP and #WINSP 100(1-P)% of the observations are considered
0113|*outliers. P is given by the specification P=<value> and default is 0.95.
S   |                                             <     >
0114|*In #TRUNCL and #WINSL an observation X is an outlier if
0115|*abs(X-mean) > level*stddev.
S   |             >
0116|*Level is given by the specification LEVEL=<level> and default is 1.96.
S   |                                           <     >
0118|*For example,
0119|*VAR Y=#PERCENT(X) TO DATA1 / gives Y values as 100*X/Sum_of_X's
0120|*VAR Y=#NORMAL(X) TO DATA1  / computes normalized X values as variable Y.
0122|- shadow a: [LINK(qv1_01.html)]
0123|*  V = More information on VAR operation
S   |   a                                   |
0124|E
0127|+TRANSFORM? þ PRINT CUR+1,E TO qv3_04.html
0128|- include HTML40.DEV
0129|- include Q.DV2
0130|- [HelpText]
0131|#TRANSFORM <data> BY <function of X>
S   |           <    >    <             >
0132|*transforms all the active variables and observations (possibly limited
0133|*by MASK, IND and CASES specifications) by <function of X> where X
S   |                                           <             >
0134|*refers to one of the active variables in turn.
0136|*TRANSFORM accepts the same functions as VAR. Thus functions
0137|*sqrt,log,exp,sin,cos,tan,atn,abs,int,probit, and rnd are available.
0138|*The 'if' structure is allowed:
0139|*For example,
0140|*TRANSFORM DATA1 BY if(X=9)then(MISSING)else(X)
0141|*replaces all values '9' in active variables by missing values.
0142|*Library functions and the control statement 'for' are not accepted.
0143|*Although the same transformations can be made by VAR for each variable
0144|*separately, use of TRANSFORM saves time and effort in systematic modi-
0145|*fications of data values.
0147|*For example,
0148|*TRANSFORM YEAR88 BY log(X)
0149|*replaces data values in data YEAR88 by their natural logarithms.
0151|*The transformed values can be saved as other (possibly new) variables
0152|*by using TRANSFORM in an extended form
0153|#TRANSFORM <data> BY <function of X> AS <letter>:<type>
S   |           <    >    <             >    <      > <    >
0154|*where <letter> is a character to be placed in front of each transformed
S   |       <      >
0155|*variable. The extension :<type> where <type> is 1,2,4 or 8 is optional
S   |                          <    >       <    >
0156|*and gives the type of new numerical variables. Default is 4.
0157|*For example,
0158|*TRANSFORM YEAR88 BY log(X) AS L
0159|*VARS=Sales,Costs
0160|*makes the logarithms of variables Sales and Costs as (new) variables
0161|*LSales and LCosts.
0163|- [New]
0164|*Also extra variables may be used in the transformation.
0165|- [/New]
0166|*In order to speed up the process, in such cases a specification MODE=2
0167|*should be entered.
0168|*Example: "Proportions of events of Decathlon in percentages"
0169|*>COPY <Survo>\U\D\DECA.SVO TEST.SVO
S   | >     <     >
0170|*MASK=--AAAAAAAAAA--
0171|*MODE=2
0172|*TRANSFORM TEST BY 1000*X/Points
0173|*FILE SHOW TEST
0175|*The active variables and observations can be centered and standardised
0176|*by
0177|*TRANSFORM <data> BY CENTERING
S   |           <    >
0178|*and
0179|*TRANSFORM <data> BY STANDARDISING (or STD),
S   |           <    >
0180|*respectively.
0182|*TRANSFORM <data> BY #UNIFORM(a,b)
S   |           <    >
0183|*generates values from a uniform distribution on interval (a,b).
0184|*For continuos variables (types 4,8) values will be from a continuos
0185|*uniform distribution on (a,b).
0186|*For discrete variables (types 1,2) values will be from a discrete
0187|*uniform distribution with values a, a+1, a+2,..., b-1 .
0188|*In huge datasets this alternative is many times faster than
0189|*TRANSFORM <data> BY (b-a)*rand(seed)+a
S   |           <    >
0190|*The pseudo-random number generator and its seed number can be selected by
0191|*a RND specification. Example: RND=rand(1998115)
0193|- [NAME(TRANSF2)][/NAME] / qv3_04.html#TRANSF2 TRANSF2?
0194|*TRANSFORM <data> BY #LINEAR(a,b) makes linear transformation X -> a*X+b .
S   |           <    >                                                >
0195|*TRANSFORM <data> BY #DISTR(P)
S   |           <    >
0196|*                    makes random values from a discrete distribution.
0197|*                    The values (in ascending order) and probabilities
0198|*                    are given as a matrix file P of two columns.
0199|*In all applications of TRANSFORM where variables are transformed
0200|*`in place' it is worthwhile to notice that transformations leading
0201|*to decimal values (like log(X)) may be inaccurate in case of integer-
0202|*valued variables (of type 1 or 2). In such a situation one should
0203|*take a list of all active variables into the edit field by FILE STATUS,
0204|*change types 1 and 2 to either 4 or 8, create (FILE CREATE) a new data
0205|*file with this list of variables and copy (FILE COPY) the original data
0206|*to this new data file. Transformations can then be made in the new data
0207|*file.
0209|- shadow a: [New][LINK(qv3_05.html)]
0210|d  M = Simulation of Markov chains by TRANSFORM
S   |   a                                          ;
0211|- shadow a: [LINK(qv1_01.html)]
0212|*  V = More information on transformations
S   |   a                                     |
0213|E
0216|+MARKOVD? þ PRINT CUR+1,E TO qv3_05.html
0217|- include HTML40.DEV
0218|- include Q.DV2
0219|- [HelpText]
0220|*Simulation of Markov chains by TRANSFORM
0222|*TRANSFORM <data> BY #MARKOV(P)
S   |           <    >
0223|*                    makes random values according to a Markov chain.
0224|*                    Each observation (variables X1,X2,...,Xm)
0225|*                    will contain one realization of the chain
0226|*                    and starts from state given by START=i (i=1,2,...).
0227|*                    Default is START=1.
0228|*                    The transition probabilities are given as
0229|*                    a square matrix P.
0231|*TRANSFORM <data> BY #MARKOV(P,<var>,<n>)
S   |           <    >              <   > < >
0232|*                    works as the previous operation but only
0233|*                    saves the state of the chain in <var>
S   |                                                     <   >
0234|*                    after <n> steps.
S   |                           < >
0236|- [New]
0237|*Also Markov chains of degrees 2,3,...,8 can be simulated by the two
0238|*TRANSFORM operations above. Then the P matrix has dimensions m^k,m,
0239|*k=2,3,...,8. The start state is in these cases always the first one.
0240|*See an example on the next page!
0241|- [/New]
0243|*.......................................................................
0244|- [New]
0245|*Example: Simulation of a 3-state Markov chain of degree 2:
0246|- [/New]
0247|*MATRIX P93
0248|*///    A   B   C
0249|*AA     0.6 0.4 0
0250|*AB     0   1   0
0251|*AC     0.2 0.2 0.6
0252|*BA     0.6 0.2 0.2
0253|*BB     0.2 0.2 0.6
0254|*BC     0.2 0.2 0.6
0255|*CA     1   0   0
0256|*CB     0   0   1
0257|*CC     0   0   1     / This is a final state!
0259|*MAT SAVE P93
0260|*FILE MAKE TEST,30,1000,L,S        / Space for 1000 chains of length 30
0261|*TRANSFORM TEST BY #MARKOV(P93)    / Generating the chains RND=1111
0262|*FILE LOAD -TEST / DELIMITER=NULL  / Loading the chains (3 first shown)
0263|* ABBCAABBAABBAABBAAAABBBCCCCCCC
0264|* AAAABBBAAAABBACCCCCCCCCCCCCCCC
0265|* BBABBAABBAABBCBCBCBCCCCCCCCCCC
0267|- shadow a: [LINK(qm10_01.html)]
0268|*  M = More information on Markov chains
S   |   a                                   |
0269|- shadow a: [LINK(qv1_01.html)]
0270|*  V = More information on transformations
S   |   a                                     |
0271|E
0273|+RNDTEST? þ PRINT CUR+1,E TO qv3_06.html
0274|- include HTML40.DEV
0275|- include Q.DV2
0276|- [HelpText]
0277|#RNDTEST <SURVO_data>,<variable>,<output_line>
S   |         <          > <        > <           >
0278|*makes empirical statistical tests on a series of numbers supposed to
0279|*form a random sample from a uniform distribution in the interval (0,1).
0281|*Most of these tests are explained in Volume 2 of "The Art of Programming"
0282|*by Donald E. Knuth.
0283|*The main application of RNDTEST is testing of various random number
0284|*generators.
0286|*A standard set of tests is performed without any extra specification.
0287|*However, If RESULTS=0, no test is performed without explicit specifica-
0288|*tions. To select tests in a more detailed form, following specifications
0289|*can be given.
0291|*RNDTEST: specifications
0293|*SUBSAMPLES=<size>,<# of classes>
S   |            <    > <            >
0294|*The sample is divided systematically in subsamples of given <size>
S   |                                                             <    >
0295|*and their uniformity is tested by the standard Chi^2-test by divi-
0296|*ding the interval (0,1) in <# of classes>.
S   |                            <            >
0297|*Also tests for mean=0.5 as well for the minimum ans maximum values
0298|*in subsamples are made.
0299|*Default is SUBSAMPLES=0 (i.e. this test is omitted).
0301|*FREQUENCIES=<# of classes>,<lower limit>,<upper limit>
S   |             <            > <           > <           >
0302|*The uniformity of the total sample is tested by the Chi^2-test.
0303|*Default: FREQUENCIES=10,0,1
0305|*MAXLAG=<largest_lag>
S   |        <           >
0306|*The autocorrelations of the series are computed up to the given
0307|*maximum lag. Default: MAXLAG=10
0309|*RNDTEST: specifications
0311|*GAPTEST=<lower_limit>,<upper_limit>,<max.gap>
S   |         <           > <           > <       >
0312|*The lengths of gaps between occurrences of values in the given range
0313|*are computed. Default: GAPTEST=0,0.5,10
0316|*PERMTEST=<# of consecutive numbers (3,4,5,6 or 7)>
S   |          <                                       >
0317|*Frequencies of different permutations of relative orderings are computed.
0318|*Default: PERMTEST=4
0320|*POKER=<# of obs.>,<# of classes>,<lower limit>,<upper_limit>
S   |       <         > <            > <           > <           >
0321|*Default: POKER=5,5,0,1
0323|*COUPON=<# of classes>,<max_len>,<lower limit>,<upper limit>
S   |        <            > <       > <           > <           >
0324|*Coupon collector's test Default: COUPON=5,20,0,1
0326|*Certain run tests are performed in any case.
0328|- shadow a: [LINK(qv3_01.html)]
0329|*R = Simulation and random numbers
S   | a                               |
0330|E
