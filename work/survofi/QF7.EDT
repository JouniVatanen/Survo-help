SURVO 98 edit field:    101       1000       1000 (32 bit version)
0001|*SAVE QF7
0005|*................................................................................
0006|*LOAD EDQ
0007|*GOTO X
0008|+FLOAD? þ PRINT CUR+1,E TO qf7_01.html
0009|- include HTML40.DEV
0010|- include Q.DV2
0011|- [HelpText]
0012|*FILE LOAD for loading data to the edit field or to a text file
0014|- shadow a: [LINK(qf7_02.html)]
0015|*  1 = Loading observations of active fields (standard alternative)
S   |   a                                                              |
0016|- shadow a: [New][LINK(qf7_03.html)]
0017|d  2 = Loading names of variables conditionally on observed values
S   |   a                                                             ;
0018|E
0020|+FLOAD1? þ PRINT CUR+1,E TO qf7_02.html
0021|- include HTML40.DEV
0022|- include Q.DV2
0023|- [HelpText]
0024|#FILE LOAD <Survo_data_file>,L
S   |           <               >
0025|*loads the active fields of the data file in the edit field from the line
0026|*L onwards. If L is omitted, the next edit line is used. IND and CASES
0027|*specifications are also available. To indicate the fields to be loaded,
0028|*a MASK specification may be used. If the name of the data file is
0029|*preceded by a '-', the header lines are not printed in front of the data
0030|*values.
0032|- [New]
0033|*Missing values are shown as '-'s. Any <string> may be used as a missing
S   |                                       <      >
0034|*value indicator in the output by giving specification MISSING=<string>.
S   |                                                               <      >
0035|*This option applies to numeric fields only.
0036|*Example: MISSING=***
0037|- [/New]
0039|- [New]
0040|*Unwanted characters are skipped by
0041|*SKIP=<list_of_characters>. Example: SKIP=,"
S   |      <                  >
0042|- [/New]
0044|#FILE LOAD <Survo_data_file> TO <text_file>
S   |           <               >    <         >
0045|*moves the active fields of the data file to a text file.
0046|*Also the header lines telling the name of the data file and the names
0047|*of the fields will be moved.
0048|*If <Survo_data_file> is preceded by a '-', the header lines are
S   |    <               >
0049|*not moved. This is useful in situations where several parts of a data
0050|*file has to be copied in a single text file.
0051|*Each record will appear as a line terminated by a line feed character.
0053|*In both forms above, fields in the output will be separated by a
0054|*space character. To use another character instead of a space, give
0055|*DELIMITER=<character>. Then all fields, except the the last one, will
S   |           <         >
0056|*be terminated by <character>. To terminate the last field as well
S   |                  <         >
0057|*with <character>, give DELIMITER=<character>,1 .
S   |      <         >                 <         >
0058|*DELIMITER=TAB is the same as DELIMITER=char(9).
0059|*If DELIMITER is used, both leading and trailing space characters
0060|*in each field are replaced by a character given by
0061|*SPACE=<space_character>. Those characters can be erased thereafter by TXTCONV.
S   |       <               >
0063|- [New]
0064|*The spaces and commas in string variables may be replaced by other
0065|*characters by using specifications STR_SPACE and STR_COMMA, respectively.
0066|*For example, STR_SPACE=_ STR_COMMA=; makes the output suitable for
0067|*plotting it as texts and labels (in GPLOT and PLOT).
0068|- [/New]
0070|*By default names of fields are truncated according to the current format.
0071|*By NAMES8=1 field names are copied to the normal length of 8 characters.
0072|- [New]
0073|*NAMES8=2 works like NAMES8=1 but replaces the name of the first variable
0074|- [/New]
0075|*by blanks. This a useful option in making data tables for R, for example.     C
0077|*The default format of the output is a data matrix (table). Other formats
0078|*may be selected by a FORMAT specification. It has 3 different forms:
0079|*1.  FORMAT=ORDER:<field_1>,<field_2>,...
S   |                  <       > <       >
0080|*    reorders the fields for output.
0081|*2.  FORMAT=LIST
0082|*    gives the output in the form of a data list.
0084|*3.  FORMAT=<name_of_format>
S   |            <              >
0085|*    specifies that a special (multiline) format given in the current
0086|*    edit field is to be used. This format has to be given in the form:
0088|*    FORMAT <name_of_format>
S   |            <              >
0089|*         one or several lines containing free text and field
0090|*         descriptions of form    name_of_field: ###.##
0091|*         or [name_of_field]
0092|*    END
0094|*    If ###.## is missing, the default format for the field is used.
0095|*    In the latter case (name in brackets []) the default format is
0096|*    always used and the value overwrites the name of the field.
0098|*Example: (Results of FILE LOAD on line 41 appear from line 48 onwards.)
0100|S 41 *FILE LOAD FINLAND,48 / FORMAT=PLAN1
S   |      77777777777777777777
0101|* 42 *FORMAT PLAN1
0102|* 43 *[Commune]                    [Province]
0103|* 44 +[Popul]          [Births]
0104|* 45 *--------------------------------------
0105|* 46 *END
0106|* 47 *
0107|* 48 *Helsinki                     UUS
0108|* 49 +483057           5851
0109|* 50 *--------------------------------------
0110|* 51 *Tampere                      HŽM
0111|* 52 +165453           2084
0112|* 53 *--------------------------------------
0113|* 54 *Turku                        TUR
0114|* 55 +164081           2330
0115|* 56 *--------------------------------------
0116|*     etc.
0119|*Fields in format lines (lines 43-45 in the preceding example) can have
0120|*various display attributes (shadow characters) and these attributes
0121|*will be copied to each result line correspondingly. In this case,
0122|*make sure that there is room enough for new shadow lines by using
0123|*the REDIM command. Also control characters of format lines are copied.
0124|*These features are valid only when data is loaded into the edit field.
0126|*In the output of FILE LOAD, a code conversion is carried out by
0127|*a specification FILTER=<conversion_file> where the 256 first bytes
S   |                        <               >
0128|*of the conversion file defines a characterwise mapping. This file
0129|- shadow %: [LINK(q0c_01.html)] [/LINK]
0130|*is generated by using a CODES SAVE command (See CODES?).
S   |                                                 %%%%%
0132|*In this conversion, certain characters (usually blanks) are skipped
0133|*(left out) by mapping them to decimal value 0.
0135|- shadow a: [LINK(qf1_01.html)]
0136|*  D = More information on data management
S   |   a                                     |
0137|E
0139|X
0140|+FLOAD2? þ PRINT CUR+1,E TO qf7_03.html
0141|- include HTML40.DEV
0142|- include Q.DV2
0143|- [HelpText]
0144|#FILE LOAD <Survo_data_file>,L
S   |           <               >
0145|*with specification
0146|*LIST_VARIABLES=<case_var>,<lower_limit>,<upper_limit>
S   |                <        > <           > <           >
0147|*and with optional MASK,VARS,IND,CASES,SELECT specifications
0148|*lists field names (<case_var>) of selected observations
S   |                    <        >
0149|*and for each observation the names of variables having values
0150|*within the range (<lower_limit>,<upper_limit>).
S   |                   <           > <           >
0151|*................................................................................
0152|*Example: Best events for the 7 first competitors in Decathlon:
0153|*IND=ORDER,1,7                / Select cases
0154|*MASK=--AAAAAAAAAA            / Select variables
0155|*LIST_VARIABLES=Name,900,2000 / List variables with values >=900
S   |                                                           >
0156|*FILE LOAD <Survo>\U\D\DECA,CUR+1
S   |           <     >
0157|*Skowrone: L_jump Hurdles Pole_vlt
0158|*Hedmark : Hurdles Javelin
0159|*Le_Roy  : L_jump Pole_vlt
0160|*Zeilbaue: L_jump Pole_vlt
0161|*Zigert  : Shot_put Pole_vlt
0162|*Bennett : 100m 400m Pole_vlt
0163|*Blinjaje: Pole_vlt
0164|*................................................................................
0166|*By default the names are listed in the short form (max. 8 characters).
0167|*The names can also be listed with their extensions by giving an extra
0168|*parameter T in LIST_VARIABLES.
0169|*Then, if this extension contains also a format string of the form
0170|*(##.###), for example, as the L_jump variable in DECA in the form
0171|a  L_jump   Long jump                   (####) {500,1200}
0172|*the #'s are replaced by the value of the variable.
0173|*................................................................................
0174|*Example: Best events for the 2 first competitors in Decathlon:
0175|*IND=ORDER,1,2                / Select cases
0176|*MASK=--AAAAAAAAAA--------
0177|*LIST_VARIABLES=Name,900,2000,T / List variables with values >=900
S   |                                                             >
0178|*FILE LOAD <Survo>\U\D\DECA,CUR+1
S   |           <     >
0179|*Skowrone
0180|a  L_jump   Long jump                   ( 931) {500,1200}
0181|a  Hurdles  110 meters hurdles          ( 903) {500,1200}
0182|a  Pole_vlt Pole vault                  ( 981) {500,1200}
0183|*Hedmark
0184|a  Hurdles  110 meters hurdles          ( 914) {500,1200}
0185|a  Javelin                              ( 975) {500,1200}
0186|*................................................................................
0188|*Limits <lower_limit>,<upper_limit> are the same for each variable by
S   |        <           > <           >
0189|*default. In any variable, however, these values may be replaced
0190|*separately by giving a specification
0191|*<name_of_variable>=<lower_limit>,<upper_limit>
S   | <                > <           > <           >
0192|*................................................................................
0193|*Example:
0194|*IND=ORDER,1,7
0195|*MASK=--AAAAAAAAAAAA------
0196|*LIST_VARIABLES=Name,900,2000
0197|*Height=195,210 Weight=90,130 / Special limits for Height and Weight
0198|*FILE LOAD <Survo>\U\D\DECA,CUR+1
S   |           <     >
0199|*Skowrone: L_jump Hurdles Pole_vlt
0200|*Hedmark : Hurdles Javelin Height Weight
0201|*Le_Roy  : L_jump Pole_vlt Weight
0202|*Zeilbaue: L_jump Pole_vlt
0203|*Zigert  : Shot_put Pole_vlt Height Weight
0204|*Bennett : 100m 400m Pole_vlt
0205|*Blinjaje: Pole_vlt Weight
0207|- shadow a: [LINK(qf1_01.html)]
0208|*  D = More information on data management
S   |   a                                     |
0209|E
0211|+AGG? þ PRINT CUR+1,E TO qf7_04.html
0212|- include HTML40.DEV
0213|- include Q.DV2
0214|- [HelpText]
0215|*Aggregation of observations in a Survo data file
0217|*There are two operations for this task, FILE AGGRE and FILE AGGR
0218|*with different options. Since they both require using of other
0219|*FILE operations, the easiest way for typical aggregations is provided
0220|*by the sucro /AGGRE which combines FILE AGGR with other necessary
0221|*actions automatically.
0223|- shadow a: [LINK(qkv0_10.html)]
0224|*  1 = /AGGRE
S   |   a        |
0225|- shadow a: [LINK(qf7_05.html)]
0226|*  2 = FILE AGGRE
S   |   a            |
0227|- shadow a: [LINK(qf7_06.html)]
0228|*  3 = FILE AGGR
S   |   a           |
0230|E
0232|+AGGRE? þ PRINT CUR+1,E TO qf7_05.html
0233|- include HTML40.DEV
0234|- include Q.DV2
0235|- [HelpText]
0236|#FILE AGGRE <Survo_data_file>,<new_aggregated_file>
S   |            <               > <                   >
0237|*combines observations in a Survo data file according to values
0238|*of a selected grouping variable. Only variables activated by 'A'
0239|*will be processed. The observations can be weighted by a selected
0240|*variable activated by 'W'.
0242|*Aggregation is controlled by an extra specification AGGRE having the
0243|*form AGGRE=<grouping variable>,<SUM or MEAN>.
S   |            <                 > <           >
0244|*The observations with the same value in <grouping variable> are combined
S   |                                         <                 >
0245|*either by summing the values of variables (SUM) or by computing their
0246|*mean values (MEAN). If missing values occur in any active variable,
0247|*the observation in question is left out.
0249|*The aggregated observations are saved in a new Survo data file with
0250|*the same structure as the original data file. If <new_aggregated_file>
S   |                                                  <                   >
0251|*already exists, it is overwritten.
0253|*To save the frequencies (or sums of weights, if 'W' variable exists),
0254|*a specification FREQ=<name_of_variable> can be entered. This variable
S   |                      <                >
0255|*will be automatically created for the new aggregated file.
0258|*Example:
0259|*MASK=--W--AAA-AAA---     / 'Popul' is weight variable
0260|*FILE AGGRE FINLAND,PROVS
0261|*AGGRE=Province,MEAN  FREQ=Popul
0263|*computes weighted means of 6 variables in provinces of Finland.
0264|*The aggregated data set is saved in a new data file PROVS.
0265|*Total population of each province will appear as 'Popul' in PROVS.
0267|- shadow a: [LINK(qf1_01.html)]
0268|*  D = More information on data management
S   |   a                                     |
0270|E
0273|+AGGR? þ PRINT CUR+1,E TO qf7_06.html
0274|- include HTML40.DEV
0275|- include Q.DV2
0276|- [HelpText]
0277|#FILE AGGR <data> BY <aggr_variable> TO <new_data_file>
S   |           <    >    <             >    <             >
0278|*with a VARIABLES list forms a new data file
0279|*by aggregating consecutive observations (with a same value
0280|*in <aggr_variable>) according to different rules (functions).
S   |    <             >
0282|*The VARIABLES list is given below the FILE AGGR operation line in the form:
0283|*VARIABLES:
0284|*A1 Function1 X1 Condition1
0285|*A2 Function2 X2 Condition2
0286|*.. ......... .. ..........
0287|*END
0289|*<data> must be sorted by <aggr_variable> before using FILE AGGR.
S   | <    >                   <             >
0290|*In the VARIABLES list, A1,A2,... are names of aggregated variables.
0291|*Also the type of a variable can be given as Sum:8, Name:S16.
0292|*Possible functions are listed on the next page.
0293|*X1,X2,... are names of variables in <data> to be aggregated.
S   |                                     <    >
0294|*Conditions are given in the form a1*a2+...+b1*b2*... (as in SELECT)
0295|*Each of terms a1,a2, etc. is given as a condition of type IND or CASES.
0297|*Functions in FILE AGGR:
0298|*N        Number of cases
0299|*         Example: Nbig   N  -  Big / Big=Popul,30000,500000
0300|*         `-' above means that N assumes no X variable.
0301|*SUM      Sum of observations
0302|*         Example: Popul:8  SUM  Popul
0303|*MEAN     Arithmetic mean of observations
0304|*STDDEV   Standard deviation
0305|*MIN      Minimum value
0306|*MAX      Maximum value
0307|- [New]
0308|*#VALUES  # of different values (<data> must be sorted also with respect
S   |                                 <    >
0309|*                                 to the X variable.)
0310|- [/New]
0311|*FIRST    Value of the first observation within the aggregate
0312|*         Typically, the name of the aggregate is copied by FIRST.
0313|*         Example: Province FIRST Province
0314|*LAST     Value of the last observation within the aggregate
0315|*NMISS    Number of missing observations
0316|*SUMS     Sum of observations. If any are missing, the result is missing.
0317|- [New]
0318|*MISSING  Just a new variable with missing values is created.
0319|- [/New]
0320|*                                   (To be continued on the next page)
0322|*Functions in FILE AGGR (Continued):
0323|- [New]
0324|*MODE          Mode of the observations
0325|- [/New]
0326|*MEDIAN        Median of the observations
0327|*FRACTILE(p)   p-fractile of the observations (0<=p<=1)
S   |                                                <  <
0328|*ORDER(k)      Observation Xk in the ordered sample X1<=X2<=...<=Xn
S   |                                                      <   <    <
0329|*              If k<0, observation X(n+k-1)
S   |                   <
0330|*              Example: ORDER(-1) is same as MAX.
0331|*ORDERN(k,V)   Value of variable V for the kth observation
0332|*              Example: Maxcomm ORDERN(-1,Commune) Popul
0333|*TMEAN(k)      Trimmed mean when k largest and least cases are omitted
0334|*TPMEAN(p)     Trimmed mean on rejection probability level p (0<p<0.5)
S   |                                                               < <
0335|*CORR(V)       Correlation of the X and the V variable
0336|*SLOPE(V)      Slope a in the regression model X=a*V+b+eps
0337|*INTERCEPT(V)  Intercept constant b in the above regression model.
0338|*              In the 3 last functions V can be replaced by ORDER i.e.
0339|*              order 1,2,...,n of observation within the aggregate.
0340|*An application of FILE AGGR is presented by the sucro
0341|*/AGGRDEMO
0342|- shadow a: [New][LINK(qf7_07.html)]
0343|d  A = Using several aggregation variables
S   |   a                                     ;
0344|- shadow a: [LINK(qf1_01.html)]
0345|*  D = More information on data management
S   |   a                                     |
0346|E
0349|+SAVESORT? þ PRINT CUR+1,E TO qf7_07.html
0350|- include HTML40.DEV
0351|- include Q.DV2
0352|- [HelpText]
0353|#FILE AGGR <data> BY <aggr_variable> TO <new_data_file>
S   |           <    >    <             >    <             >
0354|*allows only one <aggr_variable>.
S   |                 <             >
0355|*In certain applications a combination of several variables is needed
0356|*for this purpose. Although such a combination can be created by
0357|- shadow %: [LINK(qv2_04.html)] [/LINK]
0358|*concatenating string variables (see VARSTR?), a more direct method
S   |                                     %%%%%%
0359|*is to use a specification
0360|*KEY_SAVED=<string_variable>
S   |           <               >
0361|*in the FILE SORT operation which normally precedes FILE AGGR since
0362|*the data must be sorted by <aggr_variable>.
S   |                            <             >
0363|*KEY_SAVED in FILE SORT creates a <string_variable> if needed
S   |                                  <               >
0364|*in the <new_data_file> and saves the combined sort keys in it.
S   |        <             >
0365|*All components of the sort key must in this case be string variables.
0366|*If not, it is easy to make string variables from numeric ones
0367|*(by VAR XS:S3=X TO <data>, for example).
S   |                    <    >
0369|*The example on the next page shows how this works with data file
0370|*FINLAND.
0372|*KEY_SAVED=AIS / Sort keys to be saved as variable AIS
0373|*FILE SORT FINLAND BY Agri,Industry,Service TO FIN2
0375|*FILE AGGR FIN2 BY AIS TO FIN_AGGR
0376|*VARIABLES:
0377|*AIS:S3 FIRST AIS
0378|*N:2    N     -
0379|*Mean:4 MEAN  Tax
0380|*END
0381|*................................................................................
0382|*FILE LOAD FIN_AGGR / IND=ORDER,1,5          5 first cases loaded
0383|*DATA FIN_AGGR*
0384|* AIS      N        Mean
0385|* 018      2      15.000
0386|* 027      5      15.700
0387|* 035      5      16.200
0388|* 036     10      16.325
0389|* 044      7      15.657
0391|- shadow a: [LINK(qf7_06.html)]
0392|*  A = More information on FILE AGGR
S   |   a                               |
0393|- shadow a: [LINK(qf1_01.html)]
0394|*  D = More information on data management
S   |   a                                     |
0395|E
